package com.project.member.web;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.project.common.vo.ResultMessageVO;
import com.project.exception.BizDuplicateKeyException;
import com.project.exception.BizNotEffectedException;
import com.project.exception.BizNotFoundException;
import com.project.member.service.IMemberService;
import com.project.member.vo.MemberSearchVO;
import com.project.member.vo.MemberVO;

@Controller
public class MemberController {
	
	@Inject
	IMemberService memberService;

	@RequestMapping("/member/memberList.wow")
	public  String  memberList (Model model, @ModelAttribute("searchVO") MemberSearchVO searchVO) {
		List<MemberVO> memberList = memberService.getMemberList(searchVO);
		model.addAttribute("memberList", memberList);
	
		return "member/memberList";
	}
	
	@RequestMapping("/member/memberView.wow")
	public String memberView (Model model, @RequestParam(required = true) String memId) {
		try {
			MemberVO 	member = memberService.getMember(memId);
			model.addAttribute("member", member);
		} catch (BizNotFoundException e) {
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 찾기 실패 ", "회원을 찾는데 실패했습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO", resultMessageVO);
			return "common/message";
		}
		
		return "member/memberView";
	}
	
	@RequestMapping(value = "/member/memberEdit.wow", params =  {"memId"})
	public String memberEdit (Model model, String memId) {
		try {
			MemberVO 	member = memberService.getMember(memId);
			model.addAttribute("member", member);
		} catch (BizNotFoundException e) {
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 찾기 실패 ", "회원을 찾는데 실패했습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO", resultMessageVO);
			return "common/message";
			
		}
		
		return "member/memberEdit";
	}
	
	@RequestMapping(value = "/member/memberModify.wow" , method = RequestMethod.POST)
	public String memberModify(Model model, @ModelAttribute("member") MemberVO member) {
		
		try {
			memberService.modifyMember(member);
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 수정 성공", "회원을 수정하는데 성공하셨습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
		} catch (BizNotEffectedException e) {
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 수정 실패", "회원을 수정하는데 실패하셨습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
		} catch (BizNotFoundException e) {
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 찾기", "회원을 찾는데 실패하셨습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
		}
		
		
		return "member/memberList";
		
	}
	
	@RequestMapping("/member/memberDelete.wow")
	public String memberDelete(Model model, MemberVO member) {
		try {
			memberService.removeMember(member);
		} catch (BizNotEffectedException e) {
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 삭제 실페", "회원을 삭제하는데 실패하셨습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
		} catch (BizNotFoundException e) {
			ResultMessageVO resultMessageVO = new ResultMessageVO();
			resultMessageVO.messageSetting(true, "회원 찾기 실페", "회원을 찾는데 실패하셨습니다.", "/member/memberList.wow", "목록으로");
			model.addAttribute("resultMessageVO",resultMessageVO);
		}
		
		return "member/memberList";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
